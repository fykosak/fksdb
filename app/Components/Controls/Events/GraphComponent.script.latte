<script type="text/javascript">
function initRenderer(r, node) {
  var ellipse = r.ellipse(0, 0, 8, 8).attr({
    fill: '#000',
    stroke: '#000',
    "stroke-width": 0
  });
  /* set DOM node ID */
  ellipse.node.id = node.label || node.id;
  shape = r.set().push(ellipse);
  return shape;
}

function terminatedRenderer(r, node) {
  /* the default node drawing */
  var color = Raphael.getColor();
  var inner = r.ellipse(0, 0, 5, 5).attr({
    fill: '#000',
    stroke: '#000',
    "stroke-width": 0
  });

  var outer = r.ellipse(0, 0, 10, 10).attr({
    fill: null,
    stroke: '#000',
    "stroke-width": 2
  });
  /* set DOM node ID */
  inner.node.id = node.label || node.id;
  shape = r.set().push(inner).push(outer);
  return shape;
}

$(function(){

  var canvas = $('#' + {$id});
  var width = canvas.width();
  var height = 600;
  var redraw;

  var g = new Graph();
  var nodeRenderer = null;
  var node = null;

  /* add a simple node */
  {foreach $states as $state}
    {if $state ==  Events\Machine\BaseMachine::STATE_INIT}
        nodeRenderer = initRenderer;
    {elseif $state ==  Events\Machine\BaseMachine::STATE_TERMINATED}
        nodeRenderer = terminatedRenderer;
    {else}
        nodeRenderer = null;
    {/if}

    node = g.addNode({$state}, { label: {$machine->getStateName($state)}, render: nodeRenderer});
  {/foreach}

  {var conditions = []}
  {foreach $machine->getTransitions() as $transition}
      {foreach $states as $state}
          {if $transition->matches($state)}
              {var condition = $printer->printExpression($transition->getCondition())}
                  {if $condition == 1}
                      var labelStyle = {};
                      var label = {$transition->getLabel()};
                   {else}
                       var labelStyle = { title: {$condition} };
                       var label = {$transition->getLabel()} + '*';
                   {/if}
                   {if $transition->getTarget() == 'cancelled'}
                       var style = '#ccc';
                       labelStyle.stroke = '#ccc';
                   {else}
                       var style = false;
                   {/if}

              g.addEdge({$state}, {$transition->getTarget()}, { directed: true, label: label, "label-style": labelStyle, stroke: style});
          {/if}
      {/foreach}
  {/foreach}

  var layouter = new Graph.Layout.Spring(g);
  layouter.maxRepulsiveForceDistance = 10;
  layouter.layout();

  /* draw the graph using the RaphaelJS draw implementation */
  var renderer = new Graph.Renderer.Raphael({$id}, g, width, height);
  renderer.draw();


});
</script>
