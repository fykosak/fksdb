<?php

namespace FKSDB\Components\Forms\Factories\ReferencedPerson;

use FKSDB\Components\Forms\Controls\Autocomplete\PersonProvider;
use FKSDB\Components\Forms\Factories\AddressFactory;
use FKSDB\Components\Forms\Factories\FlagFactory;
use FKSDB\Components\Forms\Factories\PersonAccommodationFactory;
use FKSDB\Components\Forms\Factories\PersonFactory;
use FKSDB\Components\Forms\Factories\PersonHistoryFactory;
use FKSDB\Components\Forms\Factories\PersonInfoFactory;
use FKSDB\ORM\Models\ModelEvent;
use FKSDB\ORM\Models\ModelPerson;
use FKSDB\ORM\Services\ServiceFlag;
use FKSDB\ORM\Services\ServicePerson;
use Nette\Forms\Controls\HiddenField;
use Persons\IModifiabilityResolver;
use Persons\IVisibilityResolver;
use Persons\ReferencedPersonHandlerFactory;

/**
 * Due to author's laziness there's no class doc (or it's self explaining).
 *
 * @author Michal Červeňák <miso@fykos.cz>
 */
class ReferencedEventPersonFactory extends AbstractReferencedPersonFactory {

    /**
     * @var PersonAccommodationFactory
     */
    private $personAccommodationFactory;
    /**
     * @var \FKSDB\ORM\Models\ModelEvent
     */
    private $event;

    /**
     * ReferencedEventPersonFactory constructor.
     * @param PersonAccommodationFactory $personAccommodationFactory
     * @param AddressFactory $addressFactory
     * @param FlagFactory $flagFactory
     * @param \FKSDB\ORM\Services\ServicePerson $servicePerson
     * @param PersonFactory $personFactory
     * @param ReferencedPersonHandlerFactory $referencedPersonHandlerFactory
     * @param PersonProvider $personProvider
     * @param ServiceFlag $serviceFlag
     * @param PersonInfoFactory $personInfoFactory
     * @param PersonHistoryFactory $personHistoryFactory
     */
    public function __construct(
        PersonAccommodationFactory $personAccommodationFactory,
        AddressFactory $addressFactory,
        FlagFactory $flagFactory,
        ServicePerson $servicePerson,
        PersonFactory $personFactory,
        ReferencedPersonHandlerFactory $referencedPersonHandlerFactory,
        PersonProvider $personProvider,
        ServiceFlag $serviceFlag,
        PersonInfoFactory $personInfoFactory,
        PersonHistoryFactory $personHistoryFactory
    ) {
        parent::__construct($addressFactory,
            $flagFactory,
            $servicePerson,
            $personFactory,
            $referencedPersonHandlerFactory,
            $personProvider,
            $serviceFlag,
            $personInfoFactory,
            $personHistoryFactory);
        $this->personAccommodationFactory = $personAccommodationFactory;
    }

    /**
     * @param \FKSDB\ORM\Models\ModelEvent $event
     */
    public function setEvent(ModelEvent $event) {
        $this->event = $event;
    }

    /**
     * @param array $fieldsDefinition
     * @param int $acYear
     * @param string $searchType
     * @param bool $allowClear
     * @param IModifiabilityResolver $modifiabilityResolver
     * @param IVisibilityResolver $visibilityResolver
     * @param int $e
     * @return array
     * @throws \Nette\Utils\RegexpException
     */
    public function createReferencedPerson($fieldsDefinition, $acYear, $searchType, $allowClear, IModifiabilityResolver $modifiabilityResolver, IVisibilityResolver $visibilityResolver, $e = 0) {
        return parent::createReferencedPerson($fieldsDefinition, $acYear, $searchType, $allowClear, $modifiabilityResolver, $visibilityResolver, $this->event->event_id); // TODO: Change the autogenerated stub
    }


    /**
     * @param $sub
     * @param $fieldName
     * @param $acYear
     * @param HiddenField|null $hiddenField
     * @param array $metadata
     * @return \FKSDB\Components\Forms\Containers\AddressContainer|\FKSDB\Components\Forms\Controls\PersonAccommodation\AccommodationField|\Nette\Forms\Controls\BaseControl|null
     */
    public function createField($sub, $fieldName, $acYear, HiddenField $hiddenField = null, array $metadata = []) {

        if ($sub === 'person_accommodation') {
            $control = $this->personAccommodationFactory->createField($fieldName, $this->event);
            $this->appendMetadata($control, $hiddenField, $fieldName, $metadata);
            return $control;
        }
        return parent::createField($sub, $fieldName, $acYear, $hiddenField, $metadata);
    }

    /**
     * @param ModelPerson|null $person
     * @param $sub
     * @param $field
     * @param $acYear
     * @param $options
     * @return bool|\FKSDB\ORM\Models\ModelPostContact|mixed|null|string
     * @throws \Nette\Utils\JsonException
     */
    protected function getPersonValue(ModelPerson $person = null, $sub, $field, $acYear, $options) {
        if (!$person) {
            return null;
        }
        if ($sub === 'person_accommodation') {
            return $person->getSerializedAccommodationByEventId($this->event->event_id);
        }
        return parent::getPersonValue($person, $sub, $field, $acYear, $options);
    }
}
