transitions:
    sous:
        machine: FKSDB\Models\Transitions\Machine\EventParticipantMachine
        stateEnum: FKSDB\Models\ORM\Models\EventParticipantStatus
        transitions:
            # init application
            __init|auto.invited->invited:
                condition: FKSDB\Models\Transitions\Transition\Statements\Conditions\EventRole('organizer')
                label: _('Pozvat účastníka')
                afterExecute:
                    - FKSDB\Models\Email\Source\Sous\TransitionEmail()
            __init|auto.spare->spare:
                condition: FKSDB\Models\Transitions\Transition\Statements\Conditions\EventRole('organizer')
                label: _('Pozvat náhradníka')
                afterExecute:
                    - FKSDB\Models\Email\Source\Sous\TransitionEmail()
             # participant decides
            invited->applied:
                condition: or(FKSDB\Models\Events\Semantics\RegOpen(),FKSDB\Models\Transitions\Transition\Statements\Conditions\EventRole('organizer'))
                label: _('Potvrdit účast')
            spare->interested:
                condition: FKSDB\Models\Events\Semantics\RegOpen()
                label: _('Chci jet')
            invited->rejected:
                condition: or(FKSDB\Models\Events\Semantics\RegOpen(),FKSDB\Models\Transitions\Transition\Statements\Conditions\EventRole('organizer'))
                label: _('Odmítnout účast')
                behaviorType: danger

            # spare reject
            spare->rejected:
                condition: or(FKSDB\Models\Events\Semantics\RegOpen(),FKSDB\Models\Transitions\Transition\Statements\Conditions\EventRole('organizer'))
                label: _('Odmítnout účast')
                behaviorType: danger
            # confirm participation
            interested->applied:
                condition: FKSDB\Models\Transitions\Transition\Statements\Conditions\EventRole('organizer')
                label: _('Potvrdit účast')
                afterExecute:
                    - FKSDB\Models\Email\Source\Sous\TransitionEmail()
            # invite spare
            spare->invited:
                condition: FKSDB\Models\Transitions\Transition\Statements\Conditions\EventRole('organizer')
                label: _('Invite as participant')
                afterExecute:
                    - FKSDB\Models\Email\Source\Sous\TransitionEmail()
            # after sous
            applied->participated:
                condition: and(FKSDB\Models\Transitions\Transition\Statements\Conditions\EventRole('organizer'),FKSDB\Models\Events\Semantics\EventWas())
                label: _('Participated')
            applied->missed:
                condition: and(FKSDB\Models\Transitions\Transition\Statements\Conditions\EventRole('organizer'),FKSDB\Models\Events\Semantics\EventWas())
                label: _('Missed')

            # used in special cases, when it's undesirable to send reminders (e.g. I'll know at later date, will let you know)
            invited|auto.invited|spare|auto.spare|applied|interested->cancelled:
                condition: FKSDB\Models\Transitions\Transition\Statements\Conditions\EventRole('organizer')
                label: _('Cancel application')
            invited|spare|applied|interested->outOfDB:
                condition: FKSDB\Models\Transitions\Transition\Statements\Conditions\EventRole('organizer')
                label: _('Deal with outside FKSDB')
            outOfDB->invited:
                condition: FKSDB\Models\Transitions\Transition\Statements\Conditions\EventRole('organizer')
                label: _('Return to DB as Invited')
            outOfDB->auto.invited:
                condition: FKSDB\Models\Transitions\Transition\Statements\Conditions\EventRole('organizer')
                label: _('Return to DB as Invited (auto)')
            outOfDB->spare:
                condition: FKSDB\Models\Transitions\Transition\Statements\Conditions\EventRole('organizer')
                label: _('Return to DB as Spare')
            outOfDB->auto.spare:
                condition: FKSDB\Models\Transitions\Transition\Statements\Conditions\EventRole('organizer')
                label: _('Return to DB as Spare (auto)')
            outOfDB->applied:
                condition: FKSDB\Models\Transitions\Transition\Statements\Conditions\EventRole('organizer')
                label: _('Return to DB as Applied')
            outOfDB->interested:
                condition: FKSDB\Models\Transitions\Transition\Statements\Conditions\EventRole('organizer')
                label: _('Return to DB as Interested')
            outOfDB->participated:
                condition: FKSDB\Models\Transitions\Transition\Statements\Conditions\EventRole('organizer')
                label: _('Return to DB as Participated')
            outOfDB->rejected:
                condition: FKSDB\Models\Transitions\Transition\Statements\Conditions\EventRole('organizer')
                label: _('Return to DB as Rejected')
            outOfDB->missed:
                condition: FKSDB\Models\Transitions\Transition\Statements\Conditions\EventRole('organizer')
                label: _('Return to DB as missed')
            outOfDB->cancelled:
                condition: FKSDB\Models\Transitions\Transition\Statements\Conditions\EventRole('organizer')
                label: _('Return to DB as cancelled')
