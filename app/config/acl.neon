#
# SECURITY WARNING: it is CRITICAL that this file & directory are NOT accessible directly via a web browser!
#
# If you don't protect this directory from direct web access, anybody will be able to see your passwords.
# http://nette.org/security-warning
#

services:
    # assertions
    ownerAssertion: Authorization\Assertions\OwnerAssertion

    # data services
    #- authorizator:
     #   class: Nette\Security\Permission
      #  setup:
acl:
    # Roles
    - addRole(guest)                    # anonym (automatická role)
    - addRole(registered, guest)        # registrant (automatická role)
    - addRole(contestant, registered)   # řešitel (automatická role)
    - addRole(org)                      # org (automatická role)
    - addRole(webmaster, org)           # webař
    - addRole(taskManager, org)         # úlohář
    - addRole(dispatcher, org)          # koordinátor obálkování
    - addRole(exportDesigner, org)      # tvůrce exportů (!! má RO přístup ke všem datům)
    - addRole(fyziklaniOrg, registered)
    - addRole(dataManager, [org, exportDesigner]) # správce dat DB
    - addRole(eventManager, org)        # správce přihlášek
    - addRole(inboxManager, org)        # příjemce řešení
    - addRole(boss, org)                # šéf
    - addRole(aesop)                    # AESOPový stahovač dat
    - addRole(web)                      # webový stahovač dat (např. fksdbexport)
    - addRole(wiki)                     # neveřejný webový stahovač dat (např. fksdbexport na org wiki)
    - addRole(schoolManager)            # správce dat škol
    - addRole(superuser, [org, webmaster, taskManager, dispatcher, dataManager, exportDesigner, eventManager, inboxManager, boss])
    - addRole(cartesian)

    # Resources
    - addResource(submit)        # revoke, upload, download, edit, ALL
    - addResource(task)          # insert, edit
    - addResource(person)        # create, edit, list, delete, merge, stalk.restrict, stalk.search, stalk.search, stalk.full
    - addResource(contestant)    # create, edit, list, delete
    - addResource(school)        # create, edit, list, delete
    - addResource(storedQuery)   # create, edit, list, delete, show
    - addResource(export.adhoc)  # execute
    - addResource(export)        # execute
    - addResource(org)           # create, edit, list, delete
    - addResource(eventOrg)      # create, edit, list, delete
    - addResource(event)         # create, edit, list, application
    - addResource(fyziklani)
    - addResource(fyziklani.task) # list, import
    - addResource(fyziklani.close) # list, team, results
    - addResource(teacher)        # create, edit, list
    - addResource(eventAccommodation) # create, edit, list
    - addResource(event.dashboard) # default
    - addResource(event.schedule) # default
    - addResource(event.accommodation) # list, create, edit, billeted

    # ACL
    - allow(contestant, submit, upload)
    - allow(contestant, submit, download, [@ownerAssertion, 'isSubmitUploader'])
    - allow(contestant, submit, revoke, [@ownerAssertion, 'isSubmitUploader'])

    - allow(org, submit, edit)      # zadávání bodů
    - allow(org, contestant, list)
    - allow(org, school, list)
    - allow(org, storedQuery, list) # aby měli přehled
    - allow(org, org, list)
    - allow(org, org, edit, [@ownerAssertion, 'isOrgSelf'])
    - allow(org, person, edit, [@ownerAssertion, 'isSelf'])
    - allow(org, storedQuery, show)
    - allow(org, export, execute, and(qid('fyziklani.prez'), isEventOrgByYear(::constant(FKSDB\ORM\ModelEventType::FYZIKLANI))))
    - allow(org, teacher, ::constant(Nette\Security\Permission::ALL))
    - allow(org, person, stalk.search)
    - allow(org, person, stalk.basic, [@ownerAssertion, 'existsOwnContestant'])
    # TODO - allow(org, export, execute, and(qid('sous.prihlasky'), isEventOrgById(::constant(FKSDB\ORM\ModelEventType::XXX))))
    # TODO - allow(org, event, application, isEventOrgBy())))

    - allow(webmaster, task, insert) # stahování úloh

    - allow(dispatcher, storedQuery, list)
    - allow(dispatcher, storedQuery, show)
    - allow(dispatcher, export, execute)

    - allow(taskManager, task, ::constant(Nette\Security\Permission::ALL))

    - allow(inboxManager, submit, ::constant(Nette\Security\Permission::ALL))
    - allow(inboxManager, task, edit)  # zadání opravovačů
    - allow(inboxManager, person, edit, [@ownerAssertion, 'existsOwnContestant'])
    - allow(inboxManager, contestant, list)
    - allow(inboxManager, contestant, create)
    - allow(inboxManager, contestant, edit, [@ownerAssertion, 'isOwnContestant'])
    - allow(inboxManager, school, ::constant(Nette\Security\Permission::ALL))
    - allow(inboxManager, person, stalk.restrict, [@ownerAssertion, 'existsOwnContestant'])

    # list privileges explicitly, so that we exclude stalk and stalk-search
    - allow(dataManager, person, [create, edit, list, delete, merge])
    - allow(dataManager, school, ::constant(Nette\Security\Permission::ALL))
    - allow(dataManager, person, stalk.full)

    - allow(exportDesigner, storedQuery, ::constant(Nette\Security\Permission::ALL))
    - allow(exportDesigner, export, ::constant(Nette\Security\Permission::ALL))
    - allow(exportDesigner, export.adhoc, ::constant(Nette\Security\Permission::ALL))

    - allow(eventManager, event, ::constant(Nette\Security\Permission::ALL)) # TODO add certain privilegies to organizers too
    - allow(eventManager, eventOrg, ::constant(Nette\Security\Permission::ALL))
    - allow(eventManager, school, ::constant(Nette\Security\Permission::ALL))
    - allow(eventManager, export, execute) # TODO (needs better distinction -- assertion at event org)
    - allow(eventManager, eventAccommodation, ::constant(Nette\Security\Permission::ALL)) # in OrgModule
    - allow(eventManager, event.accommodation, ::constant(Nette\Security\Permission::ALL)) # in eventModule
    - allow(eventManager, person, stalk.full)

    - allow(boss, org, ::constant(Nette\Security\Permission::ALL))
    - allow(boss, person, edit, [@ownerAssertion, 'existsOwnContestant'])
    - allow(boss, person, stalk.full)

    - allow(aesop, export, execute, qid(['aesop.ct', 'aesop.fol', 'aesop.dsef', 'aesop.dsef2', 'aesop.tsaf', 'aesop.vaf', 'aesop.sous.j', 'aesop.sous.p', 'aesop.klani.ct', 'aesop.klani.uc', 'aesop.tabor', 'aesop.setkani.j', 'aesop.setkani.p']))
    - allow(web, export, execute, queryTag(['web-safe']))
    - allow(wiki, export, execute, queryTag(['wiki-safe']))

    - allow(taskManager, fyziklani, ::constant(Nette\Security\Permission::ALL))

    # eventModule
    - allow(registered, event.dashboard)
    - allow(org, event.dashboard)

    - allow(org, fyziklani.close, ::constant(Nette\Security\Permission::ALL)) # taks, taksImport, submit [entrx edit ,table], results (!oprávnenie len k hardVisible)
    - allow(org, fyziklani.task, ::constant(Nette\Security\Permission::ALL)) # taks, taksImport, submit [entrx edit ,table], results (!oprávnenie len k hardVisible)
    - allow(org, fyziklani, ::constant(Nette\Security\Permission::ALL)) # taks, taksImport, submit [entrx edit ,table], results (!oprávnenie len k hardVisible)
    - allow(guest, fyziklani, dashboard)

    - allow(org, event.schedule)

    - allow(schoolManager, school, ::constant(Nette\Security\Permission::ALL))

    - allow(superuser, fyziklani, correlation)



    - allow(cartesian, ::constant(Nette\Security\Permission::ALL), ::constant(Nette\Security\Permission::ALL))

