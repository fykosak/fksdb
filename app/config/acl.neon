#
# SECURITY WARNING: it is CRITICAL that this file & directory are NOT accessible directly via a web browser!
#
# If you don't protect this directory from direct web access, anybody will be able to see your passwords.
# http://nette.org/security-warning
#

services:
    # assertions
    ownerAssertion: Authorization\Assertions\OwnerAssertion

    # data services
    #- authorizator:
     #   class: Nette\Security\Permission
      #  setup:
acl:
    ## Roles
    - addRole(guest)                    # anonym (automatická role)
    - addRole(registered, guest)        # registrant (automatická role)
    - addRole(contestant, registered)   # řešitel (automatická role)
    - addRole(org)                      # org (automatická role)
    - addRole(webmaster, org)           # webař
    - addRole(taskManager, org)         # úlohář
    - addRole(inboxManager, org)        # koordinátor obálkování, příjemce řešení
    - addRole(exportDesigner, org)      # tvůrce exportů (!! má RO přístup ke všem datům)
    - addRole(dataManager, [org, exportDesigner]) # správce dat DB
    - addRole(eventManager, org)        # správce přihlášek
    - addRole(boss, org)                # šéf
    - addRole(schoolManager)            # správce dat škol
    - addRole(superuser, [org, webmaster, taskManager, inboxManager, dataManager, exportDesigner, eventManager, boss])
    - addRole(cartesian)
    # robot's roles
    - addRole(aesop)                    # AESOPový stahovač dat
    - addRole(web)                      # webový stahovač dat (např. fksdbexport)
    - addRole(wiki)                     # neveřejný webový stahovač dat (např. fksdbexport na org wiki)

    ## Resources
    - addResource(submit)        # revoke, upload, download, edit, ALL
    - addResource(task)          # insert, edit
    - addResource(person)        # create, edit, list, delete, merge, stalk.restrict, stalk.search, stalk.search, stalk.full, validation
    - addResource(contestant)    # create, edit, list, delete
    - addResource(school)        # create, edit, list, delete
    - addResource(storedQuery)   # create, edit, list, delete, show
    - addResource(export.adhoc)  # execute
    - addResource(export)        # execute
    - addResource(org)           # create, edit, list, delete
    - addResource(eventOrg)      # create, edit, list, delete
    - addResource(event)         # create, edit, list, application
    - addResource(teacher)       # create, edit, list, detail
    - addResource(email_message) # list, detail
    - addResource(chart)         # list, chart

    #applications
    - addResource(event.participant)  # list, detail
    - addResource(fyziklani.team)     # route, list, detail

    #fyziklani
    - addResource(fyziklani.dashboard)  # default
    - addResource(fyziklani.task)       # list, import
    - addResource(fyziklani.close)      # list, team, hard
    - addResource(fyziklani.results)    # final, correlation, presentation,
    - addResource(fyziklani.submit)     # create, edit, list, detail, revoke,
    - addResource(fyziklani.gameSetup)  # deafult
    - addResource(fyziklani.diplomas)   # calculate, results
    #event module
    - addResource(event.application) # import
    - addResource(event.dashboard)   # default
    - addResource(event.schedule)    # default
    - addResource(event.model)       # default
    - addResource(event.payment)     # create, edit, list, detail, delete
    - addResource(event.seating)     # edit, download, preview, print
    - addResource(event.org)         # create, edit, list, detail, delete
    - addResource(event.chart)       # list, chart

    ## ACL
    - allow(contestant, submit, upload)
    - allow(contestant, submit, download, [@ownerAssertion, 'isSubmitUploader'])
    - allow(contestant, submit, download.uploaded, [@ownerAssertion, 'isSubmitUploader'])
    - allow(contestant, submit, download.corrected, [@ownerAssertion, 'isSubmitUploader'])

    - allow(contestant, submit, revoke, [@ownerAssertion, 'isSubmitUploader'])

    - allow(org, submit, edit)      # zadávání bodů
    - allow(org, contestant, list)
    - allow(org, school, list)
    # - allow(org, storedQuery, list) # aby měli přehled // TODO vedie k milnému dojmu, že to môžu spustiť
    - allow(org, org, list)
    - allow(org, org, edit, [@ownerAssertion, 'isOrgSelf'])
    - allow(org, person, edit, [@ownerAssertion, 'isSelf'])
    - allow(org, storedQuery, show)
    - allow(org, export, execute, and(qid('fyziklani.prez'), isEventOrgByYear(::constant(FKSDB\ORM\Models\ModelEventType::FYZIKLANI))))
    - allow(org, teacher, ::constant(Nette\Security\Permission::ALL))
    - allow(org, person, stalk.search)
    - allow(org, person, stalk.basic, [@ownerAssertion, 'existsOwnContestant'])

    - allow(webmaster, task, insert) # stahování úloh

    - allow(inboxManager, storedQuery, list)
    - allow(inboxManager, storedQuery, show)
    - allow(inboxManager, export, execute)
    - allow(inboxManager, submit, ::constant(Nette\Security\Permission::ALL))
    - allow(inboxManager, task, edit)  # zadání opravovačů
    - allow(inboxManager, person, edit, [@ownerAssertion, 'existsOwnContestant'])
    - allow(inboxManager, contestant, list)
    - allow(inboxManager, contestant, create)
    - allow(inboxManager, contestant, edit, [@ownerAssertion, 'isOwnContestant'])
    - allow(inboxManager, school, ::constant(Nette\Security\Permission::ALL))
    - allow(inboxManager, person, stalk.restrict, [@ownerAssertion, 'existsOwnContestant'])

    - allow(taskManager, task, ::constant(Nette\Security\Permission::ALL))

    - allow(exportDesigner, storedQuery, ::constant(Nette\Security\Permission::ALL))
    - allow(exportDesigner, export, ::constant(Nette\Security\Permission::ALL))
    - allow(exportDesigner, export.adhoc, ::constant(Nette\Security\Permission::ALL))

    - allow(dataManager, person, ::constant(Nette\Security\Permission::ALL))
    - allow(dataManager, school, ::constant(Nette\Security\Permission::ALL))

    - allow(eventManager, event, ::constant(Nette\Security\Permission::ALL)) # TODO add certain privilegies to organizers too
    - allow(eventManager, event.org, ::constant(Nette\Security\Permission::ALL))
    - allow(eventManager, eventOrg, ::constant(Nette\Security\Permission::ALL))
    - allow(eventManager, school, ::constant(Nette\Security\Permission::ALL))
    - allow(eventManager, export, execute) # TODO (needs better distinction -- assertion at event org)
    - allow(eventManager, person, stalk.full)
    - allow(eventManager, fyziklani.team, ::constant(Nette\Security\Permission::ALL))
    - allow(eventManager, event.participant, ::constant(Nette\Security\Permission::ALL))

    - allow(boss, org, ::constant(Nette\Security\Permission::ALL))
    - allow(boss, person, edit, [@ownerAssertion, 'existsOwnContestant'])
    - allow(boss, person, stalk.full)
    - allow(boss, email_message, list)

    - allow(schoolManager, school, ::constant(Nette\Security\Permission::ALL))
    # robot role
    - allow(aesop, export, execute, qid(['aesop.ct', 'aesop.fol', 'aesop.dsef', 'aesop.dsef2', 'aesop.tsaf', 'aesop.vaf', 'aesop.sous.j', 'aesop.sous.p', 'aesop.klani.ct', 'aesop.klani.uc', 'aesop.tabor', 'aesop.setkani.j', 'aesop.setkani.p']))
    - allow(web, export, execute, queryTag(['web-safe']))
    - allow(wiki, export, execute, queryTag(['wiki-safe']))


# fyziklani
    - allow(guest,fyziklani.dashboard, default)
    - allow(guest, fyziklani.results, presentation) # môže premietať/pozerať výsledky
#base for org
    - allow(org, fyziklani.dashboard, ::constant(Nette\Security\Permission::ALL))
    - allow(org, fyziklani.task, list) # može pozerať úlohy
    - allow(org, fyziklani.close, [list,team]) # not hard!
    - allow(org, event.seating, ::constant(Nette\Security\Permission::ALL)) # editovať routing
    - allow(org, fyziklani.submit, ::constant(Nette\Security\Permission::ALL)) # može zadavať/upravovať bodovanie
    - allow(org, fyziklani.diplomas, results) # môže pozerať definitívne výsledky
    # specific ACL
    - allow(taskManager, fyziklani.task, ::constant(Nette\Security\Permission::ALL)) # importovať úlohy
    - allow(boss, fyziklani.results, ::constant(Nette\Security\Permission::ALL)) # všetko s výsledkovkami
    - allow(boss, fyziklani.gameSetup, ::constant(Nette\Security\Permission::ALL)) # pozerať nastavnie
    - allow(boss, fyziklani.close, ::constant(Nette\Security\Permission::ALL)) # pozerať nastavnie


    # eventModule
    - allow(registered, event.dashboard, ::constant(Nette\Security\Permission::ALL))

    - allow(org, event.participant, timeProgress, ::constant(Nette\Security\Permission::ALL))
    - allow(org, fyziklani.team, timeProgress, ::constant(Nette\Security\Permission::ALL))

    - allow(org, event.dashboard, ::constant(Nette\Security\Permission::ALL))

    - allow(eventManager, event.schedule, ::constant(Nette\Security\Permission::ALL)) #môže všetko s programom
    - allow(eventManager, event.model, ::constant(Nette\Security\Permission::ALL)) #može vidieť model
    - allow(eventManager, event.application, ::constant(Nette\Security\Permission::ALL)) #môže zobraziť prihlášky

    # payment
    - allow(registered, event.payment, detail, [@ownerAssertion, 'isOwnPayment'])
    - allow(registered, event.payment, edit, [@ownerAssertion, 'isOwnPayment'])
    - allow(registered, event.payment, create)
    #paymnet org
    - allow(org, event.payment, ::constant(Nette\Security\Permission::ALL))

    - allow(cartesian, ::constant(Nette\Security\Permission::ALL), ::constant(Nette\Security\Permission::ALL))

