services:
    # assertions
    ownerAssertion: FKSDB\Models\Authorization\Assertions\OwnerAssertion
    selfAssertion: FKSDB\Models\Authorization\Assertions\SelfAssertion
    paymentEditableAssertion: FKSDB\Models\Authorization\Assertions\PaymentEditableAssertion
    ownApplicationAssertion: FKSDB\Models\Authorization\Assertions\OwnApplicationAssertion

acl:
    ## Roles
    # Roles automaticly added for event
    - addRole(event.fyziklani.teacher)
    - addRole(event.fyziklani.member)
    - addRole(event.organizer)
    - addRole(event.contestOrganizer)
    - addRole(event.participant)
    # implicit roles
    - addRole(guest)                    # anonym (automatická role)
    - addRole(registered, guest)        # registrant (automatická role)
    - addRole(contestant, registered)   # řešitel (automatická role)
    - addRole(organizer, registered)          # organizer (automatická role)
    # explicit roles
    - addRole(webmaster, organizer)           # webař TODO remove
    - addRole(taskManager, organizer)         # úlohář
    - addRole(inboxManager, organizer)        # koordinátor obálkování, příjemce řešení
    - addRole(schoolManager)            # správce dat škol
    - addRole(eventManager, [organizer, schoolManager])        # správce přihlášek + allow add schools
    - addRole(dataManager, [inboxManager,taskManager,eventManager]) # správce dat DB tvůrce exportů (!! má RO přístup ke všem datům)
    - addRole(boss, organizer)                # šéf
    - addRole(superuser, [organizer, taskManager, schoolManager, inboxManager, dataManager, eventManager, boss])
    - addRole(cartesian)
    # robot's roles
    - addRole(aesop)                    # AESOPový stahovač dat
    - addRole(web)                      # webový stahovač dat (např. fksdbexport)
    - addRole(wiki)                     # neveřejný webový stahovač dat (např. fksdbexport na fiki)


    ## Resources
    - addResource(submit)        # revoke, upload, download, edit
    - addResource(points)        # detail, entry
    - addResource(task)          # insert, dispatch
    - addResource(person)        # create, edit, list, delete, merge, stalk.restrict, stalk.search, stalk.search, stalk.full, data-test
    - addResource(contestant)    # create, edit, list, delete
    - addResource(school)        # create, edit, list, delete
    - addResource(storedQuery)   # create, edit, list, delete, detial
    - addResource(export.adhoc)  # execute
    - addResource(export)        # execute
    - addResource(organizer)           # create, edit, list, delete
    - addResource(event)         # create, edit, list
    - addResource(teacher)       # create, edit, list, detail
    - addResource(emailMessage)  # list, detail
    - addResource(chart)         # list, chart
    - addResource(webService)    # default - stahovanie cez webService
    - addResource(aesop)    # default - stahovanie cez webService
    - addResource(soap)    # default - stahovanie cez webService
    - addResource(acl) # list


    #fyziklani
    - addResource(game.dashboard)  # default
    - addResource(game.task)       # list
    - addResource(game.close)      # default, hard
    - addResource(game.presentation)# default
    - addResource(game.submit)     # create, edit, list, detail, revoke,
    - addResource(game.gameSetup)  # deafult
    - addResource(game.diplomas)   # calculate, results
    - addResource(game.seating)    # default
    - addResource(game.statistics) # default

    #applications
    - addResource(event.participant)  # list, detail, organizer
    - addResource(fyziklani.team)     # route, list, detail, organizer
    #event module
    - addResource(event.dashboard)   # default
    - addResource(event.payment)     # create, edit, list, detail, delete, organizer, organizer
    - addResource(event.organizer)         # create, edit, list, detail, delete
    - addResource(event.chart)       # list, chart
    - addResource(event.schedule.group) # create, edit, list, detail, delete
    - addResource(event.schedule.item) # create, edit, list, detail, delete

    # warehouse
    - addResource(warehouse.producer)
    - addResource(warehouse.product)
    - addResource(warehouse.item)

### ACL
#PUBLIC MODULE
    - allow(contestant, submit, upload)
    - allow(contestant, submit, download, [@ownerAssertion, 'isSubmitUploader'])
    - allow(contestant, submit, download.uploaded, [@ownerAssertion, 'isSubmitUploader'])
    - allow(contestant, submit, download.corrected, [@ownerAssertion, 'isSubmitUploader'])
    - allow(contestant, submit, revoke, [@ownerAssertion, 'isSubmitUploader'])
    - allow(contestant, submit, list)
#ORGANIZER MODULE
    - allow(organizer, points, entry)      # zadávání bodů
    - allow(organizer, contestant, list)
    - allow(organizer, school, list)
    - allow(organizer, organizer, list)
    - allow(organizer, organizer, edit, @selfAssertion)
    #- allow(organizer, teacher, ::constant(Nette\Security\Permission::ALL)) TODO not working
    - allow(organizer, person, stalk.search)
    - allow(organizer, person, edit, @selfAssertion)
    - allow(organizer, person, stalk.basic, [@ownerAssertion, 'existsOwnContestant'])
    - allow(organizer, person, stalk.full, @selfAssertion)
    - allow(organizer, chart, ::constant(Nette\Security\Permission::ALL))
    - allow(organizer, webService, default)

    - allow(inboxManager, export, execute)
    - allow(inboxManager, submit, ::constant(Nette\Security\Permission::ALL))
    - allow(inboxManager, task, ::constant(Nette\Security\Permission::ALL))
    - allow(inboxManager, contestant, [list,create])
    - allow(inboxManager, contestant, edit, [@ownerAssertion, 'isOwnContestant'])
    - allow(inboxManager, school, ::constant(Nette\Security\Permission::ALL))
    - allow(inboxManager, person, edit, [@ownerAssertion, 'existsOwnContestant'])
    - allow(inboxManager, person, stalk.restrict, [@ownerAssertion, 'existsOwnContestant'])

    - allow(taskManager, submit, ::constant(Nette\Security\Permission::ALL))
    - allow(taskManager, task, ::constant(Nette\Security\Permission::ALL))

    - allow(dataManager, storedQuery, ::constant(Nette\Security\Permission::ALL))
    - allow(dataManager, export, ::constant(Nette\Security\Permission::ALL))
    - allow(dataManager, export.adhoc, ::constant(Nette\Security\Permission::ALL))
    - allow(dataManager, person, ::constant(Nette\Security\Permission::ALL))
    - allow(dataManager, emailMessage, list)

    - allow(schoolManager, school, ::constant(Nette\Security\Permission::ALL))

    - allow(eventManager, event, ::constant(Nette\Security\Permission::ALL)) # TODO add certain privilegies to organizers too
    - allow(eventManager, export, execute)
    - allow(eventManager, person, stalk.full)
    - allow(eventManager, person, edit)

    - allow(boss, organizer, ::constant(Nette\Security\Permission::ALL))
    - allow(boss, person, ::constant(Nette\Security\Permission::ALL))
    - allow(boss, emailMessage, list)
    - allow(boss, acl, list)
    # robot role
    - allow(web, export, execute, FKSDB\Models\Authorization\Assertions\StoredQueryTagAssertion(['web-safe']))
    - allow(web, webService, ::constant(Nette\Security\Permission::ALL)) # new REST-API
    - allow(wiki, export, execute, FKSDB\Models\Authorization\Assertions\StoredQueryTagAssertion(['wiki-safe']))
    - allow([wiki,web,organizer], soap, default) # old REST-API


## NEW APPLICATIONS
    - allow(guest, [fyziklani.team,event.participant], create)
    - allow([event.fyziklani.teacher,event.fyziklani.member,event.participant], [fyziklani.team,event.participant], [detail,edit], @ownApplicationAssertion)
    - allow(eventManager,[fyziklani.team,event.participant], ::constant(Nette\Security\Permission::ALL))# +organizer
## EVENT MODULE
    - allow(event.organizer, event.participant, [list, detail])
    - allow(eventManager, event.organizer, ::constant(Nette\Security\Permission::ALL))
    - allow(eventManager, event.participant, ::constant(Nette\Security\Permission::ALL))
    - allow(eventManager, event.chart, ::constant(Nette\Security\Permission::ALL))
    - allow(eventManager, event.schedule.group, ::constant(Nette\Security\Permission::ALL)) #môže všetko s programom
    - allow(eventManager, event.schedule.item, ::constant(Nette\Security\Permission::ALL)) #môže všetko s programom
## FYZIKLANI MODULE
    #base for organizer

    - allow([organizer,event.organizer], game.dashboard, ::constant(Nette\Security\Permission::ALL))
    - allow([organizer,event.organizer], game.task, ::constant(Nette\Security\Permission::ALL)) # može pozerať úlohy
    - allow([organizer,event.organizer], game.close, default) # not hard!
    - allow([organizer,event.organizer], game.submit, ::constant(Nette\Security\Permission::ALL)) # može zadavať/upravovať bodovanie
    - allow([organizer,event.organizer], game.diplomas, results) # môže pozerať definitívne výsledky
    # specific ACL
    - allow(organizer, game.presentation, ::constant(Nette\Security\Permission::ALL)) # všetko s výsledkovkami
    - allow(organizer, game.gameSetup, ::constant(Nette\Security\Permission::ALL)) # pozerať nastavnie
    - allow(organizer, game.statistics, ::constant(Nette\Security\Permission::ALL))
    - allow(organizer, game.seating, ::constant(Nette\Security\Permission::ALL))
    - allow(organizer, game.diplomas, ::constant(Nette\Security\Permission::ALL)) # môže pozerať definitívne výsledky

    # eventModule
    - allow(registered, event.dashboard, ::constant(Nette\Security\Permission::ALL))

##PAYMENTS (module)
    - allow([event.fyziklani.teacher,event.fyziklani.member], event.payment, detail, @selfAssertion)
    - allow([event.fyziklani.teacher,event.fyziklani.member], event.payment, edit, and(@selfAssertion,@paymentEditableAssertion))
    - allow([event.fyziklani.teacher,event.fyziklani.member], event.payment, create)
    - allow(eventManager, event.payment, ::constant(Nette\Security\Permission::ALL))

## WAREHOUSE MODULE
    - allow(organizer, warehouse.producer, ::constant(Nette\Security\Permission::ALL))
    - allow(organizer, warehouse.product, ::constant(Nette\Security\Permission::ALL))
    - allow(organizer, warehouse.item, ::constant(Nette\Security\Permission::ALL))

#CARTESIAN
    - allow(cartesian, ::constant(Nette\Security\Permission::ALL), ::constant(Nette\Security\Permission::ALL))
